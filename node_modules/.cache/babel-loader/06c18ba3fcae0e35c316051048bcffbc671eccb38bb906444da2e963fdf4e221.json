{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nconst useAxiosFetch = dataUrl => {\n  _s();\n  const [data, setData] = useState([]);\n  const [fetchError, setFetchError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    let isMounted = true;\n    const source = axios.CancelToken.source();\n    const fetchData = async url => {\n      setIsLoading(true);\n      try {\n        const response = await axios.get(url, {\n          cancelToken: source.token\n        });\n        if (isMounted) {\n          setData(response.data);\n          setFetchError(null);\n        }\n      } catch (err) {\n        if (isMounted) {\n          setFetchError(err.message);\n          setData([]);\n        }\n      } finally {\n        isMounted && setIsLoading(false);\n      }\n    };\n    fetchData(dataUrl);\n    const cleanUp = () => {\n      isMounted = false;\n    };\n    return cleanUp;\n  }, [dataUrl]);\n  return {\n    data,\n    fetchError,\n    isLoading\n  };\n};\n_s(useAxiosFetch, \"+XJtC1F4PrEeMvccO02DD8cTlfg=\");\nexport default useAxiosFetch;","map":{"version":3,"names":["axios","useEffect","useState","useAxiosFetch","dataUrl","_s","data","setData","fetchError","setFetchError","isLoading","setIsLoading","isMounted","source","CancelToken","fetchData","url","response","get","cancelToken","token","err","message","cleanUp"],"sources":["/Users/mac/Desktop/dlt-react-folder/rrd-project/src/hooks/useAxiosFetch.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useAxiosFetch = (dataUrl) => {\r\n    const [data, setData] = useState([])\r\n    const [fetchError, setFetchError] = useState(null)\r\n    const [isLoading, setIsLoading] =  useState(false)\r\n\r\n    useEffect(() => {\r\n        let isMounted = true\r\n        const source = axios.CancelToken.source()\r\n\r\n        const fetchData = async (url) => {\r\n            setIsLoading(true)\r\n            try {\r\n                const response = await axios.get(url, {\r\n                    cancelToken: source.token\r\n                })\r\n                if (isMounted) {\r\n                    setData(response.data)\r\n                    setFetchError(null)\r\n                }\r\n            } catch (err) {\r\n                if (isMounted) {\r\n                    setFetchError(err.message)\r\n                    setData([])\r\n                }\r\n            } finally {\r\n                isMounted && setIsLoading(false)\r\n            }\r\n        }\r\n        fetchData(dataUrl)\r\n\r\n        const cleanUp = () => {\r\n            isMounted = false\r\n        }\r\n        return cleanUp\r\n    }, [dataUrl])\r\n    \r\n  return {data, fetchError, isLoading}\r\n}\r\n\r\nexport default useAxiosFetch"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,aAAa,GAAIC,OAAO,IAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAIT,QAAQ,CAAC,KAAK,CAAC;EAElDD,SAAS,CAAC,MAAM;IACZ,IAAIW,SAAS,GAAG,IAAI;IACpB,MAAMC,MAAM,GAAGb,KAAK,CAACc,WAAW,CAACD,MAAM,CAAC,CAAC;IAEzC,MAAME,SAAS,GAAG,MAAOC,GAAG,IAAK;MAC7BL,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACA,MAAMM,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAACF,GAAG,EAAE;UAClCG,WAAW,EAAEN,MAAM,CAACO;QACxB,CAAC,CAAC;QACF,IAAIR,SAAS,EAAE;UACXL,OAAO,CAACU,QAAQ,CAACX,IAAI,CAAC;UACtBG,aAAa,CAAC,IAAI,CAAC;QACvB;MACJ,CAAC,CAAC,OAAOY,GAAG,EAAE;QACV,IAAIT,SAAS,EAAE;UACXH,aAAa,CAACY,GAAG,CAACC,OAAO,CAAC;UAC1Bf,OAAO,CAAC,EAAE,CAAC;QACf;MACJ,CAAC,SAAS;QACNK,SAAS,IAAID,YAAY,CAAC,KAAK,CAAC;MACpC;IACJ,CAAC;IACDI,SAAS,CAACX,OAAO,CAAC;IAElB,MAAMmB,OAAO,GAAGA,CAAA,KAAM;MAClBX,SAAS,GAAG,KAAK;IACrB,CAAC;IACD,OAAOW,OAAO;EAClB,CAAC,EAAE,CAACnB,OAAO,CAAC,CAAC;EAEf,OAAO;IAACE,IAAI;IAAEE,UAAU;IAAEE;EAAS,CAAC;AACtC,CAAC;AAAAL,EAAA,CArCKF,aAAa;AAuCnB,eAAeA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}